#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
"""

import requests
import json
from datetime import datetime, timedelta

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api/v1"

def test_create_raffle():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞...")
    
    raffle_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ –ª—É—á—à–∏–π –ø–æ—Å—Ç",
        "community_id": "12345",
        "contest_text": "–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –Ω–∞—à–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª—É—á—à–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –ø—Ä–∏–∑—ã!",
        "photos": [
            "https://example.com/photo1.jpg",
            "https://example.com/photo2.jpg"
        ],
        "require_community_subscription": True,
        "require_telegram_subscription": True,
        "telegram_channel": "@test_channel",
        "required_communities": ["@community1", "@community2"],
        "partner_tags": ["@partner1"],
        "winners_count": 5,
        "blacklist_participants": ["@spam_user"],
        "start_date": datetime.now().isoformat(),
        "end_date": (datetime.now() + timedelta(days=30)).isoformat(),
        "max_participants": 1000,
        "publish_results": True,
        "hide_participants_count": False,
        "exclude_me": False,
        "exclude_admins": False
    }
    
    try:
        response = requests.post(f"{BASE_URL}/raffles/", json=raffle_data)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 201:
            raffle = response.json()
            print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"ID: {raffle['id']}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
            print(f"–°—Ç–∞—Ç—É—Å: {raffle['status']}")
            return raffle['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_get_all_raffles_simple():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)...")
    
    try:
        response = requests.get(f"{BASE_URL}/raffles/all")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            raffles = response.json()
            print("‚úÖ –í—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {len(raffles)}")
            
            for raffle in raffles:
                print(f"  - {raffle['name']} (ID: {raffle['id']}, –°—Ç–∞—Ç—É—Å: {raffle['status']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_get_raffles():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...")
    
    try:
        response = requests.get(f"{BASE_URL}/raffles/")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–ª—É—á–µ–Ω!")
            print(f"–í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {data['total']}")
            print(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data['raffles'])}")
            
            for raffle in data['raffles']:
                print(f"  - {raffle['name']} (ID: {raffle['id']}, –°—Ç–∞—Ç—É—Å: {raffle['status']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_get_raffle(raffle_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {raffle_id}...")
    
    try:
        response = requests.get(f"{BASE_URL}/raffles/{raffle_id}")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            raffle = response.json()
            print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø–æ–ª—É—á–µ–Ω!")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
            print(f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ: {raffle['community_id']}")
            print(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle['winners_count']}")
            print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {raffle['participants_count']}")
            print(f"–°—Ç–∞—Ç—É—Å: {raffle['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_update_raffle(raffle_id):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {raffle_id}...")
    
    update_data = {
        "name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞",
        "winners_count": 10,
        "max_participants": 2000
    }
    
    try:
        response = requests.put(f"{BASE_URL}/raffles/{raffle_id}", json=update_data)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            raffle = response.json()
            print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
            print(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle['winners_count']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_change_status(raffle_id):
    """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {raffle_id}...")
    
    try:
        response = requests.patch(f"{BASE_URL}/raffles/{raffle_id}/status?status=active")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            raffle = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑–º–µ–Ω–µ–Ω!")
            print(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {raffle['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API...")
    
    try:
        response = requests.get("http://localhost:8000/health")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print(f"–°—Ç–∞—Ç—É—Å: {data['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    test_health_check()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    raffle_id = test_create_raffle()
    
    if raffle_id:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        test_get_raffle(raffle_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        test_update_raffle(raffle_id)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        test_change_status(raffle_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    test_get_raffles()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–ø—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    test_get_all_raffles_simple()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/docs")
    print("   http://localhost:8000/redoc")

if __name__ == "__main__":
    main() 