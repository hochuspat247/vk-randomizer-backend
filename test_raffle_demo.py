#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ API —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
"""

import requests
import json
from datetime import datetime, timedelta

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print(f"–°—Ç–∞—Ç—É—Å: {data.get('status')}")
        else:
            print("‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def test_get_all_raffles():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...")
    try:
        response = requests.get(f"{BASE_URL}/raffles/all")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            raffles = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(raffles)} —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            for i, raffle in enumerate(raffles, 1):
                print(f"  {i}. {raffle['name']} (ID: {raffle['id']})")
                print(f"     –°—Ç–∞—Ç—É—Å: {raffle['status']}")
                print(f"     –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {raffle['participants_count']}")
                print(f"     –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle['winners_count']}")
                print()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_get_raffle_by_id():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ ID"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ ID...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        response = requests.get(f"{BASE_URL}/raffles/all")
        if response.status_code == 200:
            raffles = response.json()
            if raffles:
                raffle_id = raffles[0]['id']
                print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —Å ID: {raffle_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
                response = requests.get(f"{BASE_URL}/raffles/{raffle_id}")
                print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                if response.status_code == 200:
                    raffle = response.json()
                    print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
                    print(f"–°—Ç–∞—Ç—É—Å: {raffle['status']}")
                    print(f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ: {raffle['community_id']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {response.text}")
            else:
                print("‚ùå –ù–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_create_raffle():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞...")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    new_raffle = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
        "community_id": "test_community",
        "contest_text": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
        "photos": ["https://example.com/test1.jpg"],
        "require_community_subscription": True,
        "require_telegram_subscription": False,
        "telegram_channel": None,
        "required_communities": ["@test_community"],
        "partner_tags": [],
        "winners_count": 3,
        "blacklist_participants": [],
        "start_date": datetime.now().isoformat(),
        "end_date": (datetime.now() + timedelta(days=7)).isoformat(),
        "max_participants": 100,
        "publish_results": True,
        "hide_participants_count": False,
        "exclude_me": False,
        "exclude_admins": False
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/raffles/",
            json=new_raffle,
            headers={"Content-Type": "application/json"}
        )
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 201:
            raffle = response.json()
            print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"ID: {raffle['id']}")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
            print(f"–°—Ç–∞—Ç—É—Å: {raffle['status']}")
            return raffle['id']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_update_raffle(raffle_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if not raffle_id:
        print("‚ùå –ù–µ—Ç ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {raffle_id}...")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
        "winners_count": 5
    }
    
    try:
        response = requests.put(
            f"{BASE_URL}/raffles/{raffle_id}",
            json=update_data,
            headers={"Content-Type": "application/json"}
        )
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            raffle = response.json()
            print("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}")
            print(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle['winners_count']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_change_status(raffle_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if not raffle_id:
        print("‚ùå –ù–µ—Ç ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        return
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {raffle_id}...")
    
    try:
        response = requests.patch(
            f"{BASE_URL}/raffles/{raffle_id}/status?status=active"
        )
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            raffle = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {raffle['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ API —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    test_health()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    test_get_all_raffles()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ ID
    test_get_raffle_by_id()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    raffle_id = test_create_raffle()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    if raffle_id:
        test_update_raffle(raffle_id)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        test_change_status(raffle_id)
        print()
    
    print("=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print()
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/docs")
    print("   http://localhost:8000/redoc")

if __name__ == "__main__":
    main() 