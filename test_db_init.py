#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_db_init():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    try:
        from src.utils.db_init import init_database, clear_database
        
        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        clear_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        from src.db.session import get_db
        from src.db.models.community import Community
        from src.db.models.notification import Notification
        from src.db.models.raffle import Raffle
        
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        communities = db.query(Community).all()
        print(f"‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–∞: {len(communities)} –∑–∞–ø–∏—Å–µ–π")
        for comm in communities:
            print(f"   - {comm.name} ({comm.nickname}) - {comm.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = db.query(Notification).all()
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(notifications)} –∑–∞–ø–∏—Å–µ–π")
        for notif in notifications:
            print(f"   - {notif.type} (ID: {notif.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏
        raffles = db.query(Raffle).all()
        print(f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à–∏: {len(raffles)} –∑–∞–ø–∏—Å–µ–π")
        for raffle in raffles:
            print(f"   - {raffle.name} (ID: {raffle.id}) - {raffle.textRaffleState}")
        
        db.close()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    print("=" * 50)
    
    try:
        import requests
        import time
        
        base_url = "http://localhost:8000"
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        time.sleep(2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints = [
            "/api/v1/communities/cards",
            "/api/v1/community-modals/",
            "/api/v1/nested-community-cards/",
            "/api/v1/notification-cards/",
            "/api/v1/raffles/",
        
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    count = len(data.get("cards", data.get("modals", data.get("notifications", data.get("raffles", [])))))
                    print(f"‚úÖ {endpoint}: {count} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚ùå {endpoint}: HTTP {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"‚ùå {endpoint}: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API.")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VK Randomizer Backend")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
    if not test_db_init():
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –Ω–µ –ø—Ä–æ—à–ª–æ")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    test_api_endpoints()
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/docs")
    print("üéØ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python run_server.py")

if __name__ == "__main__":
    main() 